#+title: Implementing Semantic Fragments in Haskell
#+subtitle: HHU spring/summer semester 2023
#+bibliography: ../bibliography/master.bib
#+cite_export: csl
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+OPTIONS: toc:nil
#+EXPORT_FILE_NAME: ./docs/index.html
#+author: Patrick D. Elliott

#+CAPTION: Fernsehturm, Berlin 1968 (Horst Sturm)
#+ATTR_HTML: :width 250 :style border:2px solid black;
[[./fernsehturm.jpg]]

Last updated: "[2023-04-03 11:06]" 

* Course description

#+begin_quote
This course is intended primarily as a first introduction to functional programming, aimed at students with an existing background in logic and/or linguistics. The programming language we'll be using in this course is Haskell - a statically-typed, purely functional language, with a focus on referential transparency (don't worry, you'll find out what all of this means if you take the course!). Although not as common as languages such as python, Haskell is a general-purpose programming language with industrial applications (used, e.g., for spam-filtering at Meta). For our purposes, Haskell is especially compelling since its design is inspired by mathematical tools commonly deployed in linguistic theory, such as the lambda calculus, type theory, and category theory. The main topic of this course is "computational semantics", but from a symbolic/algorithmic, rather than a data-driven perspective. Over the course of the semester, we'll gradually build up a working knowledge of Haskell by implementing logical constructs used in linguistics, such as Context Free Grammars and Montagovian fragments as *programs*.

This will be an extremely hands-on course, and students should ideally expect to bring a laptop to class. We'll set up a Haskell development environment together, and homework exercises will involve concrete programming tasks. 
#+end_quote

* TODO Schedule
 
* References
  
#+print_bibliography:

* File local variables                                             :noexport:

# Local Variables:
# time-stamp-line-limit: 1000
# time-stamp-format: "[%Y-%m-%d %H:%M]"
# time-stamp-active: t
# time-stamp-start: "Last updated: \""
# time-stamp-end: "\""
# eval: (add-hook 'before-save-hook (lambda () (if (y-or-n-p "update timestamp?") (time-stamp))) nil t)
# eval: (add-hook 'after-save-hook (lambda nil (if (y-or-n-p "export to html?") (org-html-export-to-html))) nil t)
# End:
